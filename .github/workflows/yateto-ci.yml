name: Yateto CI

on: push

jobs:
  general:
    runs-on: ubuntu-latest
    container: 
      image: seissol/gha-cpu:davschneller-gpu-image
    steps:
    - uses: actions/checkout@v4

    - name: Install Yateto
      run: |
        pip3 install -e . --break-system-packages
    
    - name: Python Tests
      run: |
        python3 -m unittest tests/internals/*.py
    
    - name: install-packages
      run: |
        apt-get update -y
        apt-get install -y software-properties-common
        add-apt-repository ppa:deadsnakes/ppa
        apt-get update -y
        apt-get install -y libomp-dev libopenmpi-dev openmpi-bin openmpi-common ninja-build
        apt-get install -y cxxtest
        
    - name: Interface Tests
      run: |
        cd ./tests/interface
        for build_type in Debug Release; do
          mkdir -p ./build-${build_type} && cd ./build-${build_type}
          cmake .. -DCMAKE_BUILD_TYPE=${build_type}
          make
          make test
          cd ..
        done

  codegen:
    runs-on: ubuntu-latest
    container: 
      image: seissol/gha-cpu:davschneller-gpu-image
    env:
      CTEST_OUTPUT_ON_FAILURE: 1
    strategy:
      fail-fast: false
      matrix:
        generator: [Eigen, LIBXSMM, LIBXSMM_JIT, OpenBLAS, PSpaMM]
        
    steps:
    - uses: actions/checkout@v4

    - name: Install Yateto
      run: |
        pip3 install -e . --break-system-packages
        
    - name: install-packages
      run: |
        apt-get update -y
        apt-get install -y software-properties-common
        add-apt-repository ppa:deadsnakes/ppa
        apt-get update -y
        apt-get install -y libomp-dev libopenmpi-dev openmpi-bin openmpi-common ninja-build
        apt-get install -y cxxtest
    
    - name: install-libxsmm
      if: ${{ matrix.generator == 'LIBXSMM_JIT' }}
      run: |
        git clone --branch 1.17 https://github.com/libxsmm/libxsmm
        cd libxsmm
        make install-minimal PREFIX=/usr

    - name: Codegen Tests
      run: |
        cd ./tests/code-gen
        for example in matmul minimal; do
          for build_type in Debug Release; do
            for precision in single double; do
              echo " ====== Test Config: ======"
              echo " Build: ${build_type}"
              echo " Precision: ${precision}"
              echo " Example: ${example}"
              echo "==========================="
              mkdir -p ./build-${example}-${build_type}-${precision}
              cd ./build-${example}-${build_type}-${precision}
              cmake .. -DEXAMPLES=${example} -DCMAKE_BUILD_TYPE=${build_type} -DPRECISION=${precision} -DVARIANT=${{ matrix.generator }} -DARCH=hsw
              make
              make test
              cd ..
            done
          done
        done
